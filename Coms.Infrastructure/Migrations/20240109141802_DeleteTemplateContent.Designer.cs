// <auto-generated />
using System;
using Coms.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Coms.Infrastructure.Migrations
{
    [DbContext(typeof(ComsDBContext))]
    [Migration("20240109141802_DeleteTemplateContent")]
    partial class DeleteTemplateContent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Coms.Domain.Entities.ActionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int?>("ContractAnnexId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LiquidationRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractAnnexId");

                    b.HasIndex("ContractId");

                    b.HasIndex("LiquidationRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("ActionHistories");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActionHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionHistoryId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Contract_FlowDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContractAnnexId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("FlowDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("LiquidationRecordId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractAnnexId");

                    b.HasIndex("ContractId");

                    b.HasIndex("FlowDetailId");

                    b.HasIndex("LiquidationRecordId");

                    b.ToTable("UserFlowDetails");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractAnnexName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractAnnexes");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnexAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractAnnexId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractAnnexId");

                    b.ToTable("ContractAnnexAttachments");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnexCost", b =>
                {
                    b.Property<int?>("ContractAnnexId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractCostId")
                        .HasColumnType("int");

                    b.HasKey("ContractAnnexId", "ContractCostId");

                    b.HasIndex("ContractCostId");

                    b.ToTable("ContractAnnexCosts");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnexFile", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContractAnnexId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UUID");

                    b.HasIndex("ContractAnnexId");

                    b.ToTable("ContractAnnexFiles");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContractCategories");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ContractCosts");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractFields");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractFile", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UUID");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractFiles");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContractCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractCategoryId");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("Coms.Domain.Entities.FlowDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FlowID")
                        .HasColumnType("int");

                    b.Property<int>("FlowRole")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowID");

                    b.HasIndex("UserId");

                    b.ToTable("FlowDetails");
                });

            modelBuilder.Entity("Coms.Domain.Entities.LiquidationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiquidationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("LiquidationRecords");
                });

            modelBuilder.Entity("Coms.Domain.Entities.LiquidationRecordAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LiquidationRecordId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LiquidationRecordId");

                    b.ToTable("LiquidationRecordAttachments");
                });

            modelBuilder.Entity("Coms.Domain.Entities.LiquidationRecordFile", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<int>("LiquidationRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UUID");

                    b.HasIndex("LiquidationRecordId");

                    b.ToTable("LiquidationRecordFiles");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Representative")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RepresentativePosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Coms.Domain.Entities.PartnerComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartnerReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerReviewId");

                    b.ToTable("PartnerComments");
                });

            modelBuilder.Entity("Coms.Domain.Entities.PartnerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContractAnnexId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int?>("LiquidationRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractAnnexId");

                    b.HasIndex("ContractId");

                    b.HasIndex("LiquidationRecordId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.ToTable("PartnerReviews");
                });

            modelBuilder.Entity("Coms.Domain.Entities.PartnerSign", b =>
                {
                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractAnnexId")
                        .HasColumnType("int");

                    b.Property<int?>("LiquidationRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PartnerId", "ContractId");

                    b.HasIndex("ContractAnnexId");

                    b.HasIndex("ContractId");

                    b.HasIndex("LiquidationRecordId");

                    b.ToTable("PartnerSigns");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RemindBefore")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContractCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Coms.Domain.Entities.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Hotline")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TemplateLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Coms.Domain.Entities.TemplateField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateFields");
                });

            modelBuilder.Entity("Coms.Domain.Entities.TemplateFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateFiles");
                });

            modelBuilder.Entity("Coms.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ActionHistory", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractAnnex", "ContractAnnex")
                        .WithMany()
                        .HasForeignKey("ContractAnnexId");

                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany("ActionHistories")
                        .HasForeignKey("ContractId");

                    b.HasOne("Coms.Domain.Entities.LiquidationRecord", "LiquidationRecord")
                        .WithMany()
                        .HasForeignKey("LiquidationRecordId");

                    b.HasOne("Coms.Domain.Entities.User", "User")
                        .WithMany("ActionHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("Contract");

                    b.Navigation("ContractAnnex");

                    b.Navigation("LiquidationRecord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany("Attachments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ActionHistory", "ActionHistory")
                        .WithMany()
                        .HasForeignKey("ActionHistoryId");

                    b.Navigation("ActionHistory");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Contract", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Template", "Template")
                        .WithMany("Contracts")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Contract_FlowDetail", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractAnnex", "ContractAnnex")
                        .WithMany()
                        .HasForeignKey("ContractAnnexId");

                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany("UserFlowDetails")
                        .HasForeignKey("ContractId");

                    b.HasOne("Coms.Domain.Entities.FlowDetail", "FlowDetail")
                        .WithMany("ContractFlowDetails")
                        .HasForeignKey("FlowDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coms.Domain.Entities.LiquidationRecord", "LiquidationRecord")
                        .WithMany()
                        .HasForeignKey("LiquidationRecordId");

                    b.Navigation("Contract");

                    b.Navigation("ContractAnnex");

                    b.Navigation("FlowDetail");

                    b.Navigation("LiquidationRecord");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnex", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany("ContractAnnexes")
                        .HasForeignKey("ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnexAttachment", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractAnnex", "ContractAnnex")
                        .WithMany()
                        .HasForeignKey("ContractAnnexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractAnnex");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnexCost", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractAnnex", "ContractAnnex")
                        .WithMany("ContractAnnexCosts")
                        .HasForeignKey("ContractAnnexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coms.Domain.Entities.ContractCost", "ContractCost")
                        .WithMany("ContractAnnexCosts")
                        .HasForeignKey("ContractCostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractAnnex");

                    b.Navigation("ContractCost");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnexFile", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractAnnex", "ContractAnnex")
                        .WithMany()
                        .HasForeignKey("ContractAnnexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractAnnex");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractCost", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany("ContractCosts")
                        .HasForeignKey("ContractId");

                    b.HasOne("Coms.Domain.Entities.Service", "Service")
                        .WithMany("ContractCosts")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Contract");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractField", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractFile", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Flow", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractCategory", "ContractCategory")
                        .WithMany()
                        .HasForeignKey("ContractCategoryId");

                    b.Navigation("ContractCategory");
                });

            modelBuilder.Entity("Coms.Domain.Entities.FlowDetail", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Flow", "Flow")
                        .WithMany("FlowDetails")
                        .HasForeignKey("FlowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coms.Domain.Entities.User", "User")
                        .WithMany("FlowDetails")
                        .HasForeignKey("UserId");

                    b.Navigation("Flow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coms.Domain.Entities.LiquidationRecord", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Coms.Domain.Entities.LiquidationRecordAttachment", b =>
                {
                    b.HasOne("Coms.Domain.Entities.LiquidationRecord", "LiquidationRecord")
                        .WithMany()
                        .HasForeignKey("LiquidationRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiquidationRecord");
                });

            modelBuilder.Entity("Coms.Domain.Entities.LiquidationRecordFile", b =>
                {
                    b.HasOne("Coms.Domain.Entities.LiquidationRecord", "LiquidationRecord")
                        .WithMany()
                        .HasForeignKey("LiquidationRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiquidationRecord");
                });

            modelBuilder.Entity("Coms.Domain.Entities.PartnerComment", b =>
                {
                    b.HasOne("Coms.Domain.Entities.PartnerReview", "PartnerReview")
                        .WithMany()
                        .HasForeignKey("PartnerReviewId");

                    b.Navigation("PartnerReview");
                });

            modelBuilder.Entity("Coms.Domain.Entities.PartnerReview", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractAnnex", "ContractAnnex")
                        .WithMany()
                        .HasForeignKey("ContractAnnexId");

                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("Coms.Domain.Entities.LiquidationRecord", "LiquidationRecord")
                        .WithMany()
                        .HasForeignKey("LiquidationRecordId");

                    b.HasOne("Coms.Domain.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("Coms.Domain.Entities.User", "User")
                        .WithMany("PartnerReviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Contract");

                    b.Navigation("ContractAnnex");

                    b.Navigation("LiquidationRecord");

                    b.Navigation("Partner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coms.Domain.Entities.PartnerSign", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractAnnex", "ContractAnnex")
                        .WithMany()
                        .HasForeignKey("ContractAnnexId");

                    b.HasOne("Coms.Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coms.Domain.Entities.LiquidationRecord", "LiquidationRecord")
                        .WithMany()
                        .HasForeignKey("LiquidationRecordId");

                    b.HasOne("Coms.Domain.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ContractAnnex");

                    b.Navigation("LiquidationRecord");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Coms.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Service", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractCategory", "ContractCategory")
                        .WithMany("Services")
                        .HasForeignKey("ContractCategoryId");

                    b.Navigation("ContractCategory");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Template", b =>
                {
                    b.HasOne("Coms.Domain.Entities.ContractCategory", "ContractCategory")
                        .WithMany("Templates")
                        .HasForeignKey("ContractCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coms.Domain.Entities.User", "User")
                        .WithMany("Templates")
                        .HasForeignKey("UserId");

                    b.Navigation("ContractCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Coms.Domain.Entities.TemplateField", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Template", "Template")
                        .WithMany("TemplateFields")
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Coms.Domain.Entities.TemplateFile", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Coms.Domain.Entities.User", b =>
                {
                    b.HasOne("Coms.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Contract", b =>
                {
                    b.Navigation("ActionHistories");

                    b.Navigation("Attachments");

                    b.Navigation("ContractAnnexes");

                    b.Navigation("ContractCosts");

                    b.Navigation("UserFlowDetails");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractAnnex", b =>
                {
                    b.Navigation("ContractAnnexCosts");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractCategory", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Coms.Domain.Entities.ContractCost", b =>
                {
                    b.Navigation("ContractAnnexCosts");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Flow", b =>
                {
                    b.Navigation("FlowDetails");
                });

            modelBuilder.Entity("Coms.Domain.Entities.FlowDetail", b =>
                {
                    b.Navigation("ContractFlowDetails");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Service", b =>
                {
                    b.Navigation("ContractCosts");
                });

            modelBuilder.Entity("Coms.Domain.Entities.Template", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("TemplateFields");
                });

            modelBuilder.Entity("Coms.Domain.Entities.User", b =>
                {
                    b.Navigation("ActionHistories");

                    b.Navigation("FlowDetails");

                    b.Navigation("PartnerReviews");

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
